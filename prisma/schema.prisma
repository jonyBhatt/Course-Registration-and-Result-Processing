// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserType {
  ADMIN
  STUDENT
  TEACHER
}

enum Status {
  APPROVED
  PENDING
}

enum SubmissionStatus {
  DONE
  PENDING
}

model User {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  email      String   @unique
  name       String
  password   String?
  role       UserType
  image_url  String?
  department String
  onboarded  Boolean  @default(false)
}

model Teacher {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  firstname     String
  lastname      String
  email         String         @unique
  position      String
  department    String
  courses       Course[]
  role          UserType       @default(TEACHER)
  imageurl      String
  announcements Announcement[]
  assignments   Assignment[]
  reports       Report[]
}

model Student {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  firstName   String
  lastName    String
  email       String  @unique
  studentId   String  @unique
  dateOfBirth String
  gender      String
  phoneNumber String?
  address     String?
  department  String
  imageUrl    String

  // Relationships

  // ... Add more relationships as needed

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  enrollment  Enrollment[]
  courses     Course[]
  submissions Submission[]
}

model Course {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String  @unique
  coursecode  String  @unique
  description String
  syllabus    String?
  attachment  String?

  teacherEmail String
  teacher      Teacher @relation(fields: [teacherEmail], references: [email])

  studentEmail String?
  student      Student? @relation(fields: [studentEmail], references: [email])

  announcements Announcement[]
  assignments   Assignment[]
  enrollment    Enrollment[]
}

model Announcement {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teacherEmail String
  teacher      Teacher @relation(fields: [teacherEmail], references: [email])

  courseId String @db.ObjectId
  course   Course @relation(fields: [courseId], references: [id])
}

model Assignment {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  title       String
  description String
  dueDate     String
  courseId    String @db.ObjectId
  course      Course @relation(fields: [courseId], references: [id])

  teacherEmail String
  teacher      Teacher      @relation(fields: [teacherEmail], references: [email])
  submissions  Submission[]
}

model Submission {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // Reference to the assignment for which this submission is made
  assignmentId String     @db.ObjectId
  assignment   Assignment @relation(fields: [assignmentId], references: [id])

  // Details about the submission (you can extend this as needed)
  studentEmail String
  student      Student @relation(fields: [studentEmail], references: [email])

  // Additional fields related to the submission, e.g., submissionDate, status, etc.
  submissionDate DateTime?        @default(now())
  submission     String
  status         SubmissionStatus @default(PENDING)
}

model Report {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  s_id    String
  reason  String
  details String

  teacherEmail String
  teacher      Teacher @relation(fields: [teacherEmail], references: [email])
}

model Enrollment {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  studnetEmail String
  courseId     String   @db.ObjectId // Assuming courseId is a string, adjust data type as needed
  status       Status   @default(PENDING) // You might want to use an enum for status (e.g., 'pending', 'approved')
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  stundets     Student  @relation(fields: [studnetEmail], references: [email])
  course       Course   @relation(fields: [courseId], references: [id])
}

model Faculty {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  image       String
  name        String
  email       String
  gender      String
  department  String
  designation String
  address     String
}
