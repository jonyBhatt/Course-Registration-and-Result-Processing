// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserType {
  ADMIN
  STUDENT
  TEACHER
}

model User {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  email      String   @unique
  name       String
  password   String?
  role       UserType
  image_url  String?
  department String
  onboarded  Boolean  @default(false)
}

model Teacher {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  firstname     String
  lastname      String
  email         String         @unique
  position      String
  department    String
  courses       Course[]
  role          UserType       @default(TEACHER)
  imageurl      String
  announcements Announcement[]
  assignments   Assignment[]
}

model Student {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName   String
  lastName    String
  email       String   @unique
  studentId   String   @unique
  dateOfBirth String
  gender      String
  phoneNumber String?
  address     String?
  department String
  imageUrl String

  // Relationships

  // ... Add more relationships as needed

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model Course {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String  @unique
  coursecode  String  @unique
  description String
  syllabus    String?
  attachment  String?

  teacherEmail String
  teacher      Teacher @relation(fields: [teacherEmail], references: [email])

  announcements Announcement[]
  assignments   Assignment[]
}

model Announcement {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teacherEmail String
  teacher      Teacher @relation(fields: [teacherEmail], references: [email])

  courseId String @db.ObjectId
  course     Course @relation(fields: [courseId], references: [id])
}

model Assignment {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  title       String
  description String
  dueDate     String
  // Other fields related to an assignment

  // Define a foreign key relationship to the Course model
 courseId String @db.ObjectId
  course     Course @relation(fields: [courseId], references: [id])

  teacherEmail String
  teacher      Teacher @relation(fields: [teacherEmail], references: [email])
}
